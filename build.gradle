//file:noinspection GroovyAssignabilityCheck
plugins {
	id 'org.quiltmc.loom' version '0.12.+'
	id 'org.quiltmc.gradle.licenser' version '1.+'
	id 'maven-publish'
}

def targetJavaVersion = 17

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE') == 'false'
ext.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : 'custom'

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-${project.minecraft_version}" + (dev && buildnumber != 'custom' ? "+${buildnumber}" : '')
group = project.maven_group

repositories {
	maven { url = "https://maven.parchmentmc.org" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://jitpack.io/" }
	maven { url = "https://jcenter.bintray.com/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_version}:v2"))
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	}

	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

	modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${project.qfapi_version}"

	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		transitive(false)
	}

	implementation 'com.github.JnCrMx:discord-game-sdk4j:v0.5.5'
	implementation "com.kohlschutter.junixsocket:junixsocket-core:2.4.0"
}

loom {
	sourceSets {
		main {
			resources {
				srcDir("src/generated/resources")
				exclude("src/generated/resources/.cache")
			}
		}
	}

	runs {
		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=${project.archivesBaseName}"

			property "${project.maven_group}.${project.archivesBaseName}.existingData", file("src/main/resources").absolutePath

			runDir "build/datagen"
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).forEach {
	it.options.encoding('UTF-8')
	it.options.incremental(true)
	it.options.deprecation(true)
	it.options.release.set(targetJavaVersion)
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

license {
	rule file('HEADER')
	include '**/*.java'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}

quiltflower {
	addToRuntimeClasspath.set(true)
}

runClient {
	jvmArgs('-Dmixin.debug.export=true -client')
}
